<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xqg.mapper.VideoMapper">

    <resultMap id="BaseVideoResultMap" type="com.xqg.domain.VideoEntity">
        <id column="videoId" jdbcType="INTEGER" property="videoId" />
        <result column="userId" jdbcType="INTEGER" property="userId" />
        <result column="videoUrl" jdbcType="VARCHAR" property="videoUrl" />
        <result column="cover" jdbcType="VARCHAR" property="cover" />

        <result column="title" jdbcType="VARCHAR" property="videoTitle" />
        <result column="introduction" jdbcType="VARCHAR" property="videoIntroduction" />
        <!--<result column="categoryId" jdbcType="INTEGER" property="category" />-->

        <result column="followState" jdbcType="INTEGER" property="followState" />
        <result column="favoriteState" jdbcType="INTEGER" property="favoriteState" />

    </resultMap>

    <resultMap id="BaseVideoStateResultMap" type="com.xqg.domain.VideoStateEntity">
        <id column="videoId" jdbcType="INTEGER" property="videoId" />
        <result column="userId" jdbcType="INTEGER" property="userId" />
        <result column="delete" jdbcType="INTEGER" property="delete" />
        <result column="auditState" jdbcType="INTEGER" property="auditState" />
        <result column="auditorId" jdbcType="INTEGER" property="auditorId" />

    </resultMap>




    <select id="getMyVideoList" resultMap="BaseVideoResultMap">


        select v.videoId,v.title,v.introduction,v.categoryId,v.videoUrl,v.cover,u.userId,u.headportrait

        <choose>

            <when test="loginUserId != null and loginUserId != 0 ">
                , if(ufl.id>0,1,0) as followState,if(vfl.id>0,1,0) as favoriteState
            </when>
            <otherwise>
                , 0 as followState,0 as favoriteState
            </otherwise>
        </choose>

        from videolist v

        left join userInfo u on u.userId = v.userId

        <if test="loginUserId != null and loginUserId != 0">
            left join user_follow_list ufl on ufl.beFollowerId = #{loginUserId , jdbcType=INTEGER} and ufl.followerId=u.userId
            left join video_favorite_list vfl on vfl.user_id = #{loginUserId , jdbcType=INTEGER} and vfl.video_id=v.videoId
        </if>

        where v.userId = #{userId}



        order by rand();



    </select>


    <select id="getRecommendVideoList" resultMap="BaseVideoResultMap">


        select v.videoId,v.title,v.introduction,v.categoryId,v.videoUrl,v.cover,u.userId,u.headportrait

        <choose>

            <when test="loginUserId != null and loginUserId != 0 ">
                , if(ufl.id>0,1,0) as followState,if(vfl.id>0,1,0) as favoriteState
            </when>
            <otherwise>
                , 0 as followState,0 as favoriteState
            </otherwise>
        </choose>

        from videolist v

            left join userInfo u on u.userId = v.userId

            <if test="loginUserId != null and loginUserId != 0">
                left join user_follow_list ufl on ufl.followerId = #{loginUserId , jdbcType=INTEGER} and ufl.beFollowerId=u.userId
                left join video_favorite_list vfl on vfl.user_id = #{loginUserId , jdbcType=INTEGER} and vfl.video_id=v.videoId
            </if>

        order by rand() limit 10;

    </select>

    <select id="getHotVideoList" resultMap="BaseVideoResultMap">


        select v.videoId,v.title,v.introduction,v.categoryid,v.videoUrl,v.cover,u.userId,u.headportrait

        <choose>

            <when test="loginUserId != null and loginUserId != 0 ">
                , if(ufl.id>0,1,0) as followState,if(vfl.id>0,1,0) as favoriteState
            </when>
            <otherwise>
                , 0 as followState,0 as favoriteState
            </otherwise>
        </choose>

        from videolist v

        left join userInfo u on u.userId = v.userId

          <if test="loginUserId != null and loginUserId != 0">
              left join user_follow_list ufl on ufl.followerId = #{loginUserId , jdbcType=INTEGER} and ufl.beFollowerId=u.userId
              left join video_favorite_list vfl on vfl.user_id = #{loginUserId , jdbcType=INTEGER} and vfl.video_id=v.videoId
           </if>

        order by rand() limit 10;

    </select>


    <select id="getFavoriteVideoList" resultMap="BaseVideoResultMap">

        select v.videoId,v.title,v.introduction,v.categoryId,v.videoUrl,v.cover,u.userId,u.headportrait

        from

        ((select f.id,f.user_id,f.video_id
          from video_favorite_list f

          where f.user_id = #{userId , jdbcType=INTEGER}

          limit 10) f

          left join videolist v
              left join userInfo u
              on v.userId = u.userId
           on f.video_id = v.videoId) ;

    </select>


    <!--获取视频点赞数-->
    <select id="getVideosPraiseCount" resultType="java.util.HashMap" parameterType="java.lang.Integer">

        SELECT videoId, count(videoId) as num FROM

        (select f.video_id as videoId

        from video_favorite_list f

        where f.video_id in

        <foreach collection="list" item="videoId" index="index" open="(" separator="," close=")">
            #{videoId}
        </foreach>) p GROUP BY videoId;

    </select>


    <!--&lt;!&ndash;获取用户喜欢的视频数&ndash;&gt;-->
    <!--<select id="getFavoriteVideoCount" resultMap="java.lang.Integer" parameterType="java.lang.Integer">-->


        <!--select count(f.id)-->

        <!--from video_favorite_list f-->

        <!--where f.user_id = #{userId , jdbcType=INTEGER}-->

    <!--</select>-->

    <!--&lt;!&ndash;获取用户的自己的视频数&ndash;&gt;-->
    <!--<select id="getMyVideoCount" resultMap="java.lang.Integer" parameterType="java.lang.Integer">-->


        <!--select count(v.videoid)-->

        <!--from videolist v-->

        <!--where v.userid = #{userId , jdbcType=INTEGER}-->

    <!--</select>-->

    <insert id="insertVideo" parameterType="com.xqg.domain.VideoEntity">

        insert into videolist (

        userId,
        videoUrl,

        <if test="videoTitle != null and videoTitle != ''">

            title,

        </if>

        <if test="videoIntroduction != null and videoIntroduction != ''">

            introduction,

        </if>

        <if test="cover != null and cover != ''">

            cover,

        </if>

        createDate,
        updateDate)
        values (
        #{userId},#{videoUrl},
        <if test="videoTitle != null and videoTitle != ''">

            #{videoTitle},

        </if>

        <if test="videoIntroduction != null and videoIntroduction != ''">

            #{videoIntroduction},

        </if>

        <if test="cover != null and cover != ''">

            #{cover},

        </if>
        now(),
        now()
        );
    </insert>

    <update id="updateVideo" parameterType="com.xqg.domain.VideoEntity">
        update videolist
        set
        <if test="videoTitle != null and videoTitle != ''">

            title = #{videoTitle},

        </if>

        <if test="videoIntroduction != null and videoIntroduction != ''">

            introduction = #{videoIntroduction},

        </if>

        <if test="cover != null and cover != ''">
            cover = #{cover},
        </if>
        updateDate = now()

        where

        userId = #{userId} and videoId = #{videoId} and `delete` = 0;

    </update>

    <update id="updateVideoState" parameterType="com.xqg.domain.VideoStateEntity">
        update videolist
        set
        <if test="delete != null ">

            `delete` = #{delete },

        </if>

        <if test="auditState != null ">

            auditState = #{auditState},

        </if>

        <if test="auditorId != null ">
            auditorId = #{auditorId},
        </if>

        auditDate = now()
        where
        `delete` = 0
        and videoId = #{videoId}
        <if test="userId != null">

         and userId = #{userId}

        </if>;

    </update>

</mapper>